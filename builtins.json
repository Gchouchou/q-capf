{
    "z": {
        "a": {
            "type": -6,
            "doc": "IP Address"
        },
        "ac": {
            "doc": "Custom HTTP Auth Handler"
        },
        "b": {
            "type": 99,
            "doc": "Dependecy Dictionary"
        },
        "bm": {
            "doc": "MSG Validator"
        },
        "c": {
            "type": -6,
            "doc": "Number of Cores"
        },
        "e": {
            "type": 99,
            "doc": "TLS connection status"
        },
        "ex": {
            "doc": "Failed Primitive in Debugger Session"
        },
        "ey": {
            "doc": "Argument to Failed Primitive in Debugger Session"
        },
        "exit": {
            "doc": "Action on Exit"
        },
        "f": {
            "type": -11,
            "doc": "q Script Command Line File"
        },
        "H": {
            "type": 6,
            "doc": "Active Sockets"
        },
        "h": {
            "type": -11,
            "doc": "hostname"
        },
        "i": {
            "type": -6,
            "doc": "PID"
        },
        "K": {
            "type": -9,
            "doc": "kdb+ Version"
        },
        "k": {
            "type": -14,
            "doc": "kdb+ version release date"
        },
        "l": {
            "type": 0,
            "doc": "license information"
        },
        "N": {
            "type": -16,
            "doc": "System local time as timespan"
        },
        "n": {
            "type": -16,
            "doc": "System UTC time as timespan"
        },
        "o": {
            "type": -11,
            "doc": "OS and Version"
        },
        "P": {
            "type": -12,
            "doc": "Localtime timestamp"
        },
        "p": {
            "type": -12,
            "doc": "UTC timestamp"
        },
        "pc": {
            "doc": "Function called after a connection has been closed"
        },
        "pd": {
            "doc": "peach Handles"
        },
        "pg": {
            "doc": "Handler for GET Requests"
        },
        "ph": {
            "doc": "Handler for HTTP GET Requests"
        },
        "pi": {
            "doc": "Handler for Console Input"
        },
        "pm": {
            "doc": "Handler for OPTIONS, PATCH, PUT and DELETE HTTP Methods"
        },
        "po": {
            "doc": "Handler after Connection Initialization"
        },
        "pp": {
            "doc": "Handler for HTTP POST request"
        },
        "pq": {
            "doc": "Handler for qcon Text Protocol"
        },
        "ps": {
            "doc": "Handler for Asynchronous Requests."
        },
        "pw": {
            "doc": "Validate User Function"
        },
        "q": {
            "type": -1,
            "doc": "Quiet Mode Status"
        },
        "r": {
            "type": -1,
            "doc": "If update would be blocked in current context"
        },
        "s": {
            "doc": "Reference to self function"
        },
        "ts": {
            "doc": "Custom Function run on timer \\t"
        },
        "u": {
            "type": -11,
            "doc": "User id"
        },
        "vs": {
            "doc": "Hook after a value is set in default namespace"
        },
        "W": {
            "type": 99,
            "doc": "Dictionary of IPC handles and bytes waiting in queue"
        },
        "w": {
            "type": -6,
            "doc": "Connection Handle"
        },
        "wc": {
            "doc": "Hook after a websocket connection has been closed"
        },
        "wo": {
            "doc": "Hook after a websocket connection has been opened"
        },
        "ws": {
            "doc": "Hook on message arriving at websocket"
        },
        "X": {
            "type": 0,
            "doc": "Raw list of all strings with which command line was invoked"
        },
        "x": {
            "type": 0,
            "doc": "Command-line arguments as list of strings, cleaned"
        },
        "Z": {
            "type": -15,
            "doc": "local datetime"
        },
        "z": {
            "type": -15,
            "doc": "UTC datetime"
        },
        "zd": {
            "doc": "Custom Compression and/or encryption parameters"
        },
        "T": {
            "type": -19,
            "doc": "Local time"
        },
        "t": {
            "type": -19,
            "doc": "UTC time"
        },
        "D": {
            "type": -14,
            "doc": "Local date"
        },
        "d": {
            "type": -14,
            "doc": "UTC date"
        }
    },

    "j": {
        "j": {
            "type": 105,
            "param": ["object"],
            "doc": "Serialize object to json"
        },
        "jd": {
            "type": 104,
            "param": ["object", "dictionary"],
            "doc": "Serialize object to json, but maps 0w, -0w to null if dictionary [null0w]:1b"
        },
        "k": {
            "type": 104,
            "param": ["json"],
            "doc": "Deserialize json string to K object"
        }
    },

    "": {
        "abs": {
            "type": 101,
            "param": ["number"],
            "doc": "Absolute Value, atomic function"
        },
        "avg": {
            "type": 101,
            "param": ["list"],
            "doc": "Arithmetic mean of list"
        },
        "wavg": {
            "type": 102,
            "param": ["weights", "list"],
            "doc": "Weighted average of list, is infix function"
        },
        "bin": {
            "type": 102,
            "param": [ "sorted", "items" ],
            "doc": "Binary search.\nIndex of item in sorted where items is greater than item at index, gives -1 if less than first.\ninfix function"
        },
        "binr": {
            "type": 102,
            "param": [ "sorted", "items" ],
            "doc": "Binary search right.\nIndex of first item in sorted where items is lesser than item at index.\ninfix function"
        },
        "cor": {
            "type": 102,
            "param": [ "list1", "list2" ],
            "doc": "Correlation between list1 and list2, is an infix function"
        },
        "cos": {
            "type": 101,
            "param": ["numeric"],
            "doc": "cosine of numeric in radians"
        },
        "acos": {
            "type": 101,
            "param": ["numeric"],
            "doc": "arcosine of numeric in radians"
        },
        "cov": {
            "type": 102,
            "param": [ "list1", "list2" ],
            "doc": "Covariance between list1 and list2, is an infix function"
        },
        "dev": {
            "type": 101,
            "param": ["list"],
            "doc": "Standard deviation of list"
        },
        "div": {
            "type": 102,
            "param": [ "num1", "num2" ],
            "doc": "Integer division between num1 and num2"
        },
        "enlist": {
            "type": 101,
            "param": [ "args" ],
            "doc": "Return a list with one or more argument as items"
        },
        "exit": {
            "type": 101,
            "param": ["code"],
            "doc": "Exits with exit code"
        },
        "exp": {
            "type": 101,
            "param": ["power"],
            "doc": "return e to the power, or null if number is null, is multithreaded primitive"
        },
        "xexp": {
            "type": 102,
            "param": [ "base", "power" ],
            "doc": "return base to the power, or null if base is null or negative, is infix and multithreaded primitive"
        },
        "getenv": {
            "type": 101,
            "param": [ "symbol" ],
            "doc": "return environment variable value of symbol"
        },
        "setenv": {
            "type": 102,
            "param": [ "symbol", "string" ],
            "doc": "set environment variable value of symbol to string"
        },
        "hopen": {
            "type": 101,
            "param": ["handle_symbol"],
            "doc": "connect to process or file through handle symbol, returns handle"
        },
        "in": {
            "type": 102,
            "param": [ "items", "target_list" ],
            "doc": "returns if items in target_list, is left atomic"
        },
        "insert": {
            "type": 102,
            "param": [ "table_symbol", "records" ],
            "doc": "insert records into already existing table_symbol, or create table with name symbol with table records"
        },
        "like": {
            "type": 102,
            "param": [ "symbol_or_string", "pattern" ],
            "doc": "returns if symbol/string matches pattern, note regex is not the same"
        },
        "log": {
            "type": 101,
            "param": ["number"],
            "doc": "natural logarithm of number, is multithreaded primitive"
        },
        "max": {
            "type": 101,
            "param": ["list"],
            "doc": "maximum of list"
        },
        "min": {
            "type": 101,
            "param": ["list"],
            "doc": "minimum of list"
        },
        "prd": {
            "type": 101,
            "param": ["list"],
            "doc": "product of list, nulls are treated as 1"
        },
        "sin": {
            "type": 101,
            "param": ["numeric"],
            "doc": "sine of numeric in radians"
        },
        "asin": {
            "type": 101,
            "param": ["numeric"],
            "doc": "arsine of numeric in radians"
        },
        "sqrt": {
            "type": 101,
            "param": ["numeric"],
            "doc": "returns square root of number, is atomic and multithreaded primitive\nreturns null if negative or null, 0 if real/float infinity, or square root of largest value"
        },
        "ss": {
            "type": 102,
            "param": [ "string", "pattern" ],
            "doc": "returns the list of starting indices of pattern matches, is infix function"
        },
        "sum": {
            "type": 101,
            "param": ["list"],
            "doc": "returns the sum of items in list"
        },
        "wsum": {
            "type": 102,
            "param": ["weights", "list"],
            "doc": "returns weighted sum of list, is infix function"
        },
        "tan": {
            "type": 101,
            "param": ["numeric"],
            "doc": "returns tangent of numeric in radians"
        },
        "atan": {
            "type": 101,
            "param": ["numeric"],
            "doc": "returns arctangent of numeric in radians"
        },
        "var": {
            "type": 101,
            "param": ["list"],
            "doc": "returns variance of list"
        },
        "within": {
            "type": 102,
            "param": [ "atom_or_list", "bounds" ],
            "doc": "returns if atom or each item of list is within or equal to bounds"
        },
        "last": {
            "type": 101,
            "param": ["list"],
            "doc": "return last item of list or dictionary"
        },
        "do": {
            "type": "control constuct",
            "param": [ "count", "expression1", "expression2..." ],
            "doc": "evaluate expression1 expression2 and etc count number of times, returns generic null"
        },
        "if": {
            "type": "control construct",
            "param": [ "test", "expression1", "expression2..." ],
            "doc": "if test expression evaluates to 1, evaluates expression1, expression2, etc... returns generic null"
        },
        "while": {
            "type": "control construct",
            "param": [ "test", "expression1", "expression2..." ],
            "doc": "unless test expression evaluates to 0, repeatedly evaluates expression1, expression2, etc... returns generic null"
        },
        "select": {
            "type": "qSQL",
            "doc": "Select all or part of a table, possibly with new columns\nqsql like syntax form select cols from table where conditions"
        },
        "update": {
            "type": "qSQL",
            "doc": "Add or amend rows or columns of a table or entries in a dictionary\nqsql like syntax form update cols from table where conditions"
        },
        "delete": {
            "type": "qSQL",
            "doc": "Delete rows or columns from a table, entries from a dictionary, or objects from a namespace"
        },
        "exec": {
            "type": "qSQL",
            "doc": "Return selected rows and columns from a table"
        },
        "from": {
            "type": "qSQL",
            "doc": "keyword in qSQL queries"
        },
        "by": {
            "type": "qSQL",
            "doc": "keyword in qSQL select queries"
        }
    },

    "q": {
        "aj": {
            "type": 100,
            "param": [ "columns", "table1", "table2" ],
            "doc": "as-of join, boundary time from table1"
        },
        "aj0": {
            "type": 100,
            "param": [ "columns", "table1", "table2" ],
            "doc": "as-of join, actual time from table2"
        },
        "ajf": {
            "type": 100,
            "param": [ "columns", "table1", "table2" ],
            "doc": "as-of join, fill from LHS if RHS is null, boundary time from table1"
        },
        "ajf0": {
            "type": 100,
            "param": [ "columns", "table1", "table2" ],
            "doc": "as-of join, fill from LHS if RHS is null, actual time from table2"
        },
        "all": {
            "type": 105,
            "param": [ "object" ],
            "doc": "if list are all non-zero, a non-zero atom, an empty list"
        },
        "any": {
            "type": 105,
            "param": [ "object" ],
            "doc": "if list has an non-zero, a non-zero atom"
        },
        "asc": {
            "type": 100,
            "param": [ "object" ],
            "doc": "ascending sort:\nsort dictionaries by value\ntable by first non-key column\nmixed list by datatype and by type"
        },
        "iasc": {
            "type": 100,
            "param": [ "object" ],
            "doc": "Indexes needed to sort list object in ascending order i.e. first index is the index of the smallest element and asc[l]~l[ iasc[l] ]"
        },
        "xasc": {
            "type": 100,
            "param": [ "columns", "table" ],
            "doc": "Sort table in ascending order of specified columns, infix function"
        },
        "asof": {
            "type": 100,
            "param": [ "table1", "table2" ],
            "doc": "returns the values of the last row matching the rest of the keys and time <= the time in table 2"
        },
        "attr": {
            "type": 104,
            "param": [ "object" ],
            "doc": "return object attributes as symbol vector: sorted, unique, partitioned, true index"
        },
        "avgs": {
            "type": 100,
            "param": ["list"],
            "doc": "Running average of list"
        },
        "mavg": {
            "type": 100,
            "param": [ "int", "list"],
            "doc": "Moving average of int items of list, is infix function"
        },
        "ceiling": {
            "type": 105,
            "param": ["list"],
            "doc": "Least integer greater than or equal to boolean or numeric in list, is an atomic function"
        },
        "count": {
            "type": 101,
            "param": ["list"],
            "doc": "Number of items or 1"
        },
        "mcount": {
            "type": 100,
            "param": [ "int", "list" ],
            "doc": "Moving count of int items in list, is inflix function"
        },
        "cols": {
            "type": 100,
            "param": ["table"],
            "doc": "List of columns from table, symbol of table variable name or filesymbol"
        },
        "xcol": {
            "type": 100,
            "param": [ "new_cols", "table" ],
            "doc": "Rename table with new_cols, in that order, is an infix function"
        },
        "xcols": {
            "type": 100,
            "param": [ "cols", "table" ],
            "doc": "Reorder table with cols order, is an infix function"
        },
        "scov": {
            "type": 100,
            "param": [ "list1", "list2" ],
            "doc": "Sample covariance between list1 and list2, is an infix function"
        },
        "cross": {
            "type": 100,
            "param": [ "list1", "list2" ],
            "doc": "Cross product between list1 and list2, is an infix function"
        },
        "csv": {
            "type": -10
        },
        "cut": {
            "type": 100,
            "param": [ "indices", "list" ],
            "doc": "split list by indices into list of lists"
        },
        "deltas": {
            "type": 109,
            "param": ["list"],
            "doc": "Difference between consecutive items of list"
        },
        "desc": {
            "type": 100,
            "param": [ "object" ],
            "doc": "descending sort:\nsort dictionaries by value\ntable by first non-key column\nmixed list by datatype and by type"
        },
        "idesc": {
            "type": 100,
            "param": [ "object" ],
            "doc": "Indexes needed to sort list object in descending order"
        },
        "xdesc": {
            "type": 100,
            "param": [ "columns", "table" ],
            "doc": "Sort table in descending order of specified columns, infix function"
        },
        "fills": {
            "type": 108,
            "param": ["list"],
            "doc": "replace nulls with previous non-null values"
        },
        "or": {
            "type": 102,
            "param": [ "left", "right" ],
            "doc": "Greater of left and right, is a multithreaded primitive"
        },
        "and": {
            "type": 102,
            "param": [ "left", "right" ],
            "doc": "Lesser of left and right, is a multithreaded primitive"
        },
        "mmu": {
            "type": 102,
            "param": [ "matrix1", "matrix2" ],
            "doc": "Matrix or dot product of matrix1 and matrix2"
        },
        "mdev": {
            "type": 100,
            "param": [ "int", "list"],
            "doc": "Moving deviation of int items of list, is infix function"
        },
        "sdev": {
            "type": 100,
            "param": [ "list" ],
            "doc": "Sample standard deviation"
        },
        "differ": {
            "type": 105,
            "param": ["list"],
            "doc": "Returns boolean list where consecutive values of list differ"
        },
        "distinct": {
            "type": 101,
            "param": ["list"],
            "doc": "Returns distinct items of list"
        },
        "dsave": {
            "type": 110,
            "param": [ "path", "tables" ],
            "doc": "save tables to path"
        },
        "each": {
            "type": 100,
            "param": [ "function", "list" ],
            "doc": "Applies function to each item of list"
        },
        "peach": {
            "type": 100,
            "param": [ "function", "list" ],
            "doc": "Applies function to each item of list but in parallel, if there are subprocesses"
        },
        "ej": {
            "type": 100,
            "param": [ "cols", "table1", "table2" ],
            "doc": "Returns table1 joined table2 on cols, where they are equal"
        },
        "ema": {
            "type": 100,
            "param": [ "smoothing", "list" ],
            "doc": "Returns exponential moving average with smoothing parameter smoothing, list or atom, is infix function"
        },
        "eval": {
            "type": 104,
            "param": ["tree"],
            "doc": "evaluate parse tree and returns result"
        },
        "reval": {
            "type": 104,
            "param": ["tree"],
            "doc": "evaluate parse tree and returns result, but blocks deletion"
        },
        "except": {
            "type": 100,
            "param": [ "list", "exceptions" ],
            "doc": "Returns list but without exceptions"
        },
        "fby": {
            "type": 100,
            "param": [ "aggregator_item_list", "indicator" ],
            "doc": "returns item list, grouped by indicator then applies aggregator to each group. is infix function"
        },
        "first": {
            "type": 101,
            "param": ["list"],
            "doc": "return first item of list or dictionary"
        },
        "fkeys": {
            "type": 100,
            "param": ["table"],
            "doc": "returns a dictionary that maps foreign-key columns to their tables"
        },
        "flip": {
            "type": 101,
            "param": [ "object" ],
            "doc": "Transposes object, could be list of lists, dictionary or table"
        },
        "floor": {
            "type": 101,
            "param": ["list"],
            "doc": "Greatest integer less than or equal to boolean or numeric in list, is an atomic function"
        },
        "get": {
            "type": 101,
            "param": ["path_or_symbol"],
            "doc": "get the expression of symbol atom or from path"
        },
        "set": {
            "type": 100,
            "param": [ "target", "source" ],
            "doc": "set target value to source, target can be global name, file or directory, can also specify compression algorithm"
        },
        "group": {
            "type": 101,
            "param": ["list"],
            "doc": "Return dictionary where key are elements and values is the list of indices where it is present"
        },
        "gtime": {
            "type": 100,
            "param": ["local_timestamp"],
            "doc": "shifts local timestamp to UTC time"
        },
        "ltime": {
            "type": 100,
            "param": ["UTC_timestamp"],
            "doc": "shifts UTC timestamp to local time"
        },
        "hcount": {
            "type": 104,
            "param": ["file_symbol"],
            "doc": "return size of file symbol in bytes"
        },
        "hdel": {
            "type": 101,
            "param": ["file_symbol"],
            "doc": "delete the file or folder and echo input"
        },
        "hclose": {
            "type": 101,
            "param": ["handle"],
            "doc": "close connection handle, this is should be an integer from hopen"
        },
        "hsym": {
            "type": 105,
            "param": ["symbols"],
            "doc": "prefix symbols with colon if it does not beign with one"
        },
        "ij": {
            "type": 100,
            "param": [ "table1", "keyed_table2" ],
            "doc": "returns table1 joined on common values of key columns of table2, and the columns should share the same name"
        },
        "ijf": {
            "type": 100,
            "param": [ "table1", "keyed_table2" ],
            "doc": "returns table1 joined on common values of key columns of table2, and the columns should share the same name"
        },
        "inter": {
            "type": 100,
            "param": [ "list1", "list2" ],
            "doc": "return common values of list1, list2, for dictionaries, uses common values"
        },
        "inv": {
            "type": 101,
            "param": ["matrix"],
            "doc": "inverts non-singular matrix using LU decomposition"
        },
        "key": {
            "type": 101,
            "param": ["object_or_symbol"],
            "doc": "Returns dictionary keys\nkeys of a keyed table\nfiles in a folder\nif a file exists\nif name is defined\ntype of vector\nenumerator of list\nif an integer, same thing as til"
        },
        "keys": {
            "type": 101,
            "param": ["table"],
            "doc": "return primary key columns of table"
        },
        "xkey": {
            "type": 100,
            "param": [ "columns", "table" ],
            "doc": "set columns as primary keys in table"
        },
        "lj": {
            "type": 104,
            "param": [ "table1", "table2" ],
            "doc": "returns left join of table1 on table2, table2 should have keyed columns that match names in table1"
        },
        "ljf": {
            "type": 104,
            "param": [ "table1", "table2" ],
            "doc": "returns left join of table1 on table2, table2 should have keyed columns that match names in table1"
        },
        "load": {
            "type": 106,
            "param": ["file_symbol"],
            "doc": "load object from binary file_symbol, in directory recursively searches for objects"
        },
        "rload": {
            "type": 106,
            "param": ["directory_symbol"],
            "doc": "load splayed table from binary directory_symbol"
        },
        "xlog": {
            "type": 100,
            "param": [ "base", "number" ],
            "doc": "return the base logarithm of number, is infix function"
        },
        "lower": {
            "type": 100,
            "param": ["string_or_symbol"],
            "doc": "return string or symbol to lowercase"
        },
        "upper": {
            "type": 100,
            "param": ["string_or_symbol"],
            "doc": "return string or symbol to uppercase"
        },
        "lsq": {
            "type": 102,
            "param": [ "response_matrix", "design_matrix" ],
            "doc": "returns the least squares solution that minimizes x - (x lsq y) mmu y; rows of design matrix should be independent; lsq uses Choleski decomposition"
        },
        "maxs": {
            "type": 108,
            "param": ["list"],
            "doc": "return running maximums of list"
        },
        "mmax": {
            "type": 100,
            "param": [ "int", "list" ],
            "doc": "return moving maximum of last int consecutive items in list"
        },
        "md5": {
            "type": 104,
            "param": ["string"],
            "doc": "return as a byestream its MD5 (message-digest algorithm 5) hash"
        },
        "med": {
            "type": 100,
            "param": ["list"],
            "doc": "return median of list"
        },
        "meta": {
            "type": 100,
            "param": ["table"],
            "doc": "return meta data of table or table_symbol, meta data included column name c, data type t, foreign key f, attribute a"
        },
        "mins": {
            "type": 108,
            "param": ["list"],
            "doc": "return running minimums of list"
        },
        "mmin": {
            "type": 100,
            "param": [ "int", "list" ],
            "doc": "return moving minimum of last int consecutive items in list"
        },
        "mod": {
            "type": 100,
            "param": [ "nums", "bases" ],
            "doc": "return nums mod bases, and is a multithreaded primitive, atomic function"
        },
        "neg": {
            "type": 101,
            "param": ["number"],
            "doc": "return negation of number, if null returns null"
        },
        "next": {
            "type": 100,
            "param": ["list"],
            "doc": "shifts list forward, last element is null since there is no next element"
        },
        "prev": {
            "type": 109,
            "param": ["list"],
            "doc": "shifts list backward, first element is null since there is no previous element"
        },
        "xprev": {
            "type": 100,
            "param": [ "shift", "list" ],
            "doc": "shifts list by shift amount, negative number shift forward first or last shift elements are null"
        },
        "not": {
            "type": 101,
            "param": [ "object" ],
            "doc": "return 0b if object is not equal to zero, 1b otherwise, is an atomic function and a multithreaded primitive"
        },
        "null": {
            "type": 101,
            "param": [ "object" ],
            "doc": "return 1b if object is null, is an atomic function and a multithreaded primitive"
        },
        "over": {
            "type": 100,
            "param": [ "function", "object" ],
            "doc": "if function is univariate, keeps applying function until value stops changing, and output final result; if function is bivariate, and object is a list, applies function on consecutive values accumulating and return final result"
        },
        "scan": {
            "type": 100,
            "param": [ "function", "object" ],
            "doc": "if function is univariate, keeps applying function until value stops changing, and output all intermediate result; if function is bivariate, and object is a list, applies function on consecutive values accumulating and return intermediate results"
        },
        "parse": {
            "type": 100,
            "param": ["expression"],
            "doc": "if expression is a q-function returns the lambda, else returns the parse tree"
        },
        "pj": {
            "type": 100,
            "param": [ "table1", "table2" ],
            "doc": "left join table1 and table2 on keyed common table2 columns, and sums values of common columns"
        },
        "prds": {
            "type": 108,
            "param": ["list"],
            "doc": "return cumulative products of its items"
        },
        "prior": {
            "type": 100,
            "param": [ "function", "list" ],
            "doc": "return list of results of function applied to each item and the item preceding it, function should be bivariate or more"
        },
        "rand": {
            "type": 100,
            "param": [ "list_or_atom" ],
            "doc": "return random item in list or a random atom of same type"
        },
        "rank": {
            "type": 100,
            "param": [ "list" ],
            "doc": "return the index of each item in ascending sort, i.e. first entry is the position of the first item in the list when sorted asc."
        },
        "ratios": {
            "type": 109,
            "param": ["list"],
            "doc": "returns ratios between consecutive items of list"
        },
        "raze": {
            "type": 107,
            "param": ["list"],
            "doc": "joins or concatenates all items of list and returns final result"
        },
        "read0": {
            "type": 101,
            "param": ["file_symbol_or_descriptor"],
            "doc": "reads file as list of strings delimited by LF or CRLF and delimiters are removed\n with file descriptor (file;start;length), can control which chunks are read"
        },
        "read1": {
            "type": 101,
            "param": ["file_symbol_or_descriptor"],
            "doc": "reads file as bytes, with file descriptor (file;start;length), can control which chunks are read"
        },
        "reciprocal": {
            "type": 101,
            "param": ["number"],
            "doc": "returns the reciprocal of number, atomic and multithreaded primitive"
        },
        "reverse": {
            "type": 101,
            "param": ["object"],
            "doc": "returns lists in reverse order, dictionaries with reverse key order and tables with reverse column order"
        },
        "rotate": {
            "type": 100,
            "param": ["shift" ,"object"],
            "doc": "returns lists rotated by shift items, left for positive and right for negative\ndictionaries with rotates key order\ntables rotates column order"
        },
        "save": {
            "type": 106,
            "param": ["path/to/v.ext"],
            "doc": "saves global variable v to path and depending on ext creates a different object, returns filename"
        },
        "rsave": {
            "type": 106,
            "param": ["table"],
            "doc": "saves table splayed to directory"
        },
        "show": {
            "type": 100,
            "param": ["object"],
            "doc": "formats object and displays it at the console stdout, returns identity function"
        },
        "signum": {
            "type": 100,
            "param": ["number"],
            "doc": "returns sign of number, return -1 for nulls, is atomic and multithreaded primitive"
        },
        "ssr": {
            "type": 100,
            "param": [ "string", "pattern", "string_or_function" ],
            "doc": "returns string where each matching pattern substring is replaced by string or function[matched_substring]"
        },
        "string": {
            "type": 101,
            "param": ["object"],
            "doc": "returns object as a string, works on all datatypes, is atomic"
        },
        "sublist": {
            "type": 100,
            "param": [ "int_or_pair", "list" ],
            "doc": "returns sublist of list by index int or pair (start; length), is guaranteed to be a subset"
        },
        "sums": {
            "type": 108,
            "param": ["list"],
            "doc": "return cumulative sums of list items"
        },
        "msum": {
            "type": 100,
            "param": [ "int", "list" ],
            "doc": "Moving sum of int items of list, is infix function"
        },
        "sv": {
            "type": 100,
            "param": [ "scalar", "list" ],
            "doc": "Encode list with scalar:\nFor list of strings, joins string with delimiter scalar\nFor sym lists, joins into new symbol seperated by period when scalar is empty symbol, but for filepath components it seperates by /\nOn int lists, evaluates at base scalar\nFor byte or bits list, converts to integer"
        },
        "system": {
            "type": 105,
            "param": ["command_string"],
            "doc": "executes kdb+ system command_string"
        },
        "tables": {
            "type": 100,
            "param": ["namespace_symbol"],
            "doc": "returns list of tables as symbols in namespace"
        },
        "til": {
            "type": 100,
            "param": ["positive_integer"],
            "doc": "returns list of the first n natural numbers, from 0 to n-1"
        },
        "trim": {
            "type": 100,
            "param": ["list"],
            "doc": "return list without leading and trailing nulls"
        },
        "ltrim": {
            "type": 100,
            "param": ["list"],
            "doc": "return list without leading nulls"
        },
        "rtrim": {
            "type": 100,
            "param": ["list"],
            "doc": "return list without trailing nulls"
        },
        "type": {
            "type": 101,
            "param": ["object"],
            "doc": "return type of object as a short int"
        },
        "uj": {
            "type": 100,
            "param": [ "table1", "table2" ],
            "doc": "if table1 and table2 have matching key columns, return table1 with table2 values filling with nulls\nelse insert table2 into table1 filling with nulls"
        },
        "ujf": {
            "type": 100,
            "param": [ "table1", "table2" ],
            "doc": "if table1 and table2 have matching key columns, return table1 with table2 values filling with nulls\nelse insert table2 into table1 filling with nulls"
        },
        "union": {
            "type": 105,
            "param": [ "list1", "list2" ],
            "doc": "return distinct union of items in list1 and list2, could also be atoms"
        },
        "ungroup": {
            "type": 100,
            "param": [ "table" ],
            "doc": "if table has cells as list but for any row, the lists are the same length, returns normalized table with one row for each item of a lists"
        },
        "upsert": {
            "type": 104,
            "param": [ "table_or_symbol", "records" ],
            "doc": "append or overwrite records to table or symbol of table name, returns new table"
        },
        "value": {
            "type": 101,
            "param": ["object"],
            "doc": "returns value of object:\ndictionary: list of values\nsymbol atom: value of symbol in default namespace\nenumeration: corresponding symbol vector\nstring: evaluates string as code\nlist: calls first element with remaining as arguments\nprojection: function followed by arguments\ncompositions: list of composed values\nderived function: value of iterator\noperator: internal code\nview: list of metadata\nlambda: the structure\nfile symbol: content of datafile"
        },
        "svar": {
            "type": 101,
            "param": ["list"],
            "doc": "returns sample variance of list"
        },
        "view": {
            "type": 100,
            "param": ["view"],
            "doc": "returns expression for the view"
        },
        "views": {
            "type": 100,
            "param": [],
            "doc": "returns sorted list of views currently defined in default namespace"
        },
        "vs": {
            "type": 100,
            "param": [ "atom", "vector" ],
            "doc": "partition a symbol, string or bytestream, or encode a vector from an atom or a matrix from a vector"
        },
        "where": {
            "type": 101,
            "param": ["list"],
            "doc": "if list is boolean, returns indices where 1\nif list of non-neg integers, returns list where index appears number of times equal to value something similar for keys in dictionary"
        },
        "wj": {
            "type": 100,
            "param": [ "timestamps", "common_column", "table1", "(table2;(agg1;col1);(agg2;col2))" ],
            "doc": "window join"
        },
        "wj1": {
            "type": 100,
            "param": [ "timestamps", "common_column", "table1", "(table2;(agg1;col1);(agg2;col2))" ],
            "doc": "window join"
        },
        "xbar": {
            "type": 100,
            "param": [ "base", "number_or_date" ],
            "doc": "returns number rounded to the nearest multiple of base"
        },
        "xgroup": {
            "type": 100,
            "param": [ "columns", "table" ],
            "doc": "returns table grouped by columns as primary keys"
        },
        "xrank": {
            "type": 100,
            "param": [ "bucket_count", "list" ],
            "doc": "returns for each item in list the bucket it falls into, from 0 to bucket_count-1"
        }
    },

    "Q": {
        "A": {
            "type": 10,
            "doc": "upper-case alphabet"
        },
        "a": {
            "type": 10,
            "doc": "lower-case alphabet"
        },
        "an": {
            "type": 10,
            "doc": "all alphanumerics"
        },
        "addmonths": {
            "type": 100,
            "param": [ "date", "months" ],
            "doc": "return date + number of months"
        },
        "addr": {
            "type": 104,
            "param": [ "hostname_symbol" ],
            "doc": "return hostname symbol as an integer"
        },
        "b6": {
            "type": 10,
            "doc": "upper- and lower-case alphabet and numerics"
        },
        "bt": {
            "type": 100,
            "param": [],
            "doc": "echo backtrace to stout"
        },
        "btoa": {
            "type": 104,
            "param": ["string"],
            "doc": "return b64 encode"
        },
        "bv": {
            "type": 100,
            "param": ["optional"],
            "doc": "construct dictionary .Q.vp of table schemas for tables wtih missing partitions.\nWith argument, use prototype from first partition instead of last"
        },
        "bvi": {
            "type": 100,
            "param": ["optional"],
            "doc": "same as .Q.bv but scans only new partitions"
        },
        "chk": {
            "type": 100,
            "param": ["HDB_filepath"],
            "doc": "fill HDB\nfills tables missing from partitions using the most recent partition as template"
        },
        "cn": {
            "type": 100,
            "param": ["partitioned_table"],
            "doc": "return count partitioned table\nPopulates .Q.pn cache"
        },
        "D": {
            "type": 0,
            "doc": "In segmented DBs, return a list of the partitions, conformant to .Q.P"
        },
        "dd": {
            "type": 100,
            "param": [ "symbol", "symbol_or_string" ],
            "doc": "returns joined symbol and symbol or string, shorthand for ` sv x, `$string y"
        },
        "def": {
            "type": 100,
            "param": [ "default_parameter_dictionary", "output_of_.Q.opt[.z.x]" ],
            "doc": "merges default parameter dictionary with second argument which is the output of .Q.opt .z.x"
        },
        "dpft": {
            "type": 104,
            "param": [ "directory_handle", "partition", "field", "table_or_symbol" ],
            "doc": "save table"
        },
        "dpfts": {
            "type": 100,
            "param": [ "directory_handle", "partition", "field", "table_or_symbol", "symtable_handle" ],
            "doc": "save table with symtable"
        },
        "dpt": {
            "type": 104,
            "param": [ "directory_handle", "partition", "table_or_symbol" ],
            "doc": "save table unsorted"
        },
        "dpt": {
            "type": 100,
            "param": [ "directory_handle", "partition", "table_or_symbol", "symtable_handle" ],
            "doc": "save table unsorted with symtable"
        },
        "dsftg": {
            "type": 100,
            "param": [ "(dst;part;table)", "(src;offset;length)", "fields", "(types;widths)", "post-processing" ],
            "doc": "load process save"
        },
        "en": {
            "type": 104,
            "param": [ "symbol_folder", "table" ],
            "doc": "enumerate varchar cols"
        },
        "ens": {
            "type": 104,
            "param": [ "symbol_folder", "table", "symfile_symbol" ],
            "doc": "enumerate varchar cols against domain"
        },
        "f": {
            "type": 100,
            "param": [ "precision", "number" ],
            "doc": "return number formatted as float to precision decimal places"
        },
        "fc": {
            "type": 100,
            "param": [ "unary_atomic_func", "list" ],
            "doc": "returns result of function on each item in list, uses parallel execution"
        },
        "ff": {
            "type": 100,
            "param": [ "table", "new_columns" ],
            "doc": "returns table with new columns with all nulls, if column name already in table, does not do anything"
        },
        "fk": {
            "type": 100,
            "param": ["table_column"],
            "doc": "return ` if column is not a foreign key or table as symbol"
        },
        "fmt": {
            "type": 100,
            "param": [ "length", "decimal_places", "number" ],
            "doc": "return number as string of length characters with exactly decimal places"
        },
        "fpn": {
            "type": 100,
            "param": [ "function", "filepath_to_fifo", "chunk_size" ],
            "doc": "reads chunks of complete \\n delimited records from pipe and applies function to each record."
        },
        "fps": {
            "type": 104,
            "param": [ "function", "filepath_to_fifo" ],
            "doc": "reads chunks of size 131000 bytes complete \\n delimited records from pipe and applies function to each record."
        },
        "fsn": {
            "type": 100,
            "param": [ "function", "filepath", "chunk_size" ],
            "doc": "reads chunks of complete \\n delimited records from file and applies function to each record."
        },
        "fs": {
            "type": 104,
            "param": [ "function", "filepath" ],
            "doc": "reads chunks of size 131000 bytes complete \\n delimited records from file and applies function to each record."
        },
        "ft": {
            "type": 100,
            "param": [ "unary_function_for_simple_table", "keyed_table" ],
            "doc": "apply simple\napplies function for simple table to keyed table and returns table with as many key columns as keyed_table"
        },
        "fu": {
            "type": 100,
            "param": [ "unary_function", "list" ],
            "doc": "apply unique\napplies unary_function to distinct elements of list then populates the list assuming it is a true function."
        },
        "gc": {
            "type": 104,
            "param": [],
            "doc": "garbage collects and returns the amount of bits freed"
        },
        "gz": {
            "type": 104,
            "param": ["meta"],
            "doc": "GZip\nif meta is ::, returns if zlib is loaded\nif meta is a string, returns unzipped string\nif meta is ( compression level; string ) returns zipped string with compression level"
        },
        "hdpf": {
            "type": 100,
            "param": [ "historicalport", "directory", "partition", "`p#field" ],
            "doc": "save tables"
        },
        "hg": {
            "type": 100,
            "param": ["URL_symbol"],
            "doc": "returns result of HTTP[S] GET query at URL"
        },
        "host": {
            "type": 104,
            "param": ["int_IP_address"],
            "doc": "returns int IP address as symbol"
        },
        "hp": {
            "type": 100,
            "param": [ "URL_symbol", "MIME_string", "POST_query_string" ],
            "doc": "HTTP post request"
        },
        "id": {
            "type": 100,
            "param": ["object"],
            "doc": "Sanitize symbols of improper q names"
        },
        "ind": {
            "type": 100,
            "param": [ "partitioned_table", "max_rows" ],
            "doc": "return partitioned table with only max number of rows"
        },
        "j10": {
            "type": 105,
            "param": ["string"],
            "doc": "return string encoded as binhex, the alphabet .Q.b6"
        },
        "j12": {
            "type": 105,
            "param": ["string"],
            "doc": "return string encoded as base 36, the alphabet .Q.nA"
        },
        "x10": {
            "type": 105,
            "param": ["string"],
            "doc": "return decoded binhex string, the alphabet .Q.b6"
        },
        "x12": {
            "type": 105,
            "param": ["string"],
            "doc": "return decoded base 36 string, the alphabet .Q.nA"
        },
        "k": {
            "type": -9,
            "doc": "kx q version"
        },
        "K": {
            "type": -14,
            "doc": "kx q version date"
        },
        "l": {
            "type": 104,
            "param": ["directory_symbol"],
            "doc": "loads directory recursively as in load but in default namespace"
        },
        "ld": {
            "type": 104,
            "param": ["file_strings"],
            "doc": "Exposes logic used by load, returns file strings grouped into blocks"
        },
        "li": {
            "type": 100,
            "param": ["partitions"],
            "doc": "load partitions\nin the current hdp, any partitions which are in partitions and on disk"
        },
        "lo": {
            "type": 100,
            "param": [ "database_symbol", "cd_boolean", "execute_scripts_boolean" ],
            "doc": "Load a database without changing directory and or loading scripts in database"
        },
        "M": {
            "type": -7,
            "doc": "chunk size for .Q.dsftg"
        },
        "MAP": {
            "type": 100,
            "param": [],
            "doc": "Keeps partition mapped to avoid overhead of repeated file system calls"
        },
        "n": {
            "type": 10,
            "doc": "numerics"
        },
        "nA": {
            "type": 10,
            "doc": "upper-case alphabet and numerics"
        },
        "opt": {
            "type": 100,
            "param": [".z.x"],
            "doc": "returns command-line as a dictionary, using the output of .z.x, defaults can be added using .Q.def"
        },
        "P": {
            "type": 11,
            "doc": "In segmented DBs, returns a list of the segments"
        },
        "par": {
            "type": 100,
            "param": [ "directory_symbol", "partition_date", "table" ],
            "doc": "returns expected directory path of table of that date"
        },
        "PD": {
            "type": 11,
            "doc": "In partioned DBs, returns partition locations"
        },
        "pd": {
            "type": 11,
            "doc": "In partioned DBs, returns partition locations as modified by .Q.view"
        },
        "pf": {
            "type": -11,
            "doc": "In partitioned DBs, returns the partition field, possible values are `date`month`year`int"
        },
        "pn": {
            "type": 99,
            "doc": "In partitioned DBs, returns a dictionary of cached partition counts"
        },
        "prf0": {
            "type": 105,
            "param": ["pid"],
            "doc": "code profiler\returns a table representing a snapshot of the call stack at the tiem of the call in another kdb+ process"
        },
        "pt": {
            "type": 0,
            "doc": "returns a list of partitioned tables"
        },
        "pv": {
            "type": 0,
            "doc": "modified partition values"
        },
        "PV": {
            "type": 0,
            "doc": "partition values"
        },
        "qp": {
            "type": 100,
            "param": ["object"],
            "doc": "returns if object is partitioned table, if splayed returns 0b, else 0"
        },
        "qt": {
            "type": 100,
            "param": ["object"],
            "doc": "returns if object is a table, else 0b"
        },
        "s": {
            "type": 100,
            "param": ["object"],
            "doc": "returns object as formatted plain text, as used by console"
        },
        "s1": {
            "type": 100,
            "param": ["object"],
            "doc": "returns string representation of object"
        },
        "sbt": {
            "type": 100,
            "param": ["backtrace_obj"],
            "doc": "returns backtrace as a string formatted for display"
        },
        "sha1": {
            "type": 104,
            "param": ["string"],
            "doc": "returns string as a bytestream its SHA-1 hash"
        },
        "t": {
            "type": 10,
            "doc": "type letters\nlist of chars indexed by datatype numbers"
        },
        "trp": {
            "type": 100,
            "param": [ "unary_function", "arg1", "binary_function" ],
            "doc": "extend trap at\nreturns unary function with arg1, if error returns binary function called with error string and backtrace object"
        },
        "trpd": {
            "type": 100,
            "param": [ "function", "args", "binary_function" ],
            "doc": "extend trap\nreturns function with args, if error returns binary function called with error string and backtrace object"
        },
        "ts": {
            "type": 100,
            "param": [ "arg1", "arg2" ],
            "doc": "time and space\nequivalent to \\ts .[arg1;arg2], returning the time in miliseconds and space in bytes used for applying arg1 on arg2"
        },
        "ty": {
            "type": 100,
            "param": ["list"],
            "doc": "type\nreturns type of list as a character code, lower case for lists, and upper case for uniform lists, else blank"
        },
        "u": {
            "type": -1,
            "doc": "date based\nin segmented DBs, return 1b if each partition is uniquely found in one segment\nin partitioned DBs, return 1"
        },
        "V": {
            "type": 100,
            "param": ["table"],
            "doc": "table to dict\nreturns a dictionary of its column name to column values"
        },
        "v": {
            "type": 100,
            "param": ["symbol"],
            "doc": "value\nif filepath, returns splayed table stored at symbol\nif any other symbol, returns global named symbol\nanything else, returns input"
        },
        "view": {
            "type": 100,
            "param": ["filter"],
            "doc": "subview\nfilters any future queries to partitioned dbs with the input filter values"
        },
        "vp": {
            "type": 99,
            "doc": "missing partitions\nin partitioned DBs, returns a dictionary of table schemas for tables with missing partitions"
        },
        "w": {
            "type": 100,
            "param": [],
            "doc": "memory stats\nreturns the memory stats from \\w into a more readable dictionary"
        },
        "x": {
            "type": 0,
            "doc": "non-command parameters\nset by .Q.opt, a list a non-command parameters from the command line, where command parameters are prefixed by -"
        }
    },

    "h": {
        "br": {
            "type": 10,
            "doc": "linebreak"
        },
        "c0": {
            "type": -11,
            "doc": "web color"
        },
        "c1": {
            "type": -11,
            "doc": "web color"
        },
        "cd": {
            "type": 100,
            "param": ["table_or_list"],
            "doc": "CSV from data\nreturns a string of csv values"
        },
        "code": {
            "type": 100,
            "param": ["string"],
            "doc": "code after Tab\nencloses tab in string with code and nobr"
        },
        "d": {
            "type": -10,
            "doc": "delimiter"
        },
        "ed": {
            "type": 100,
            "param": ["table"],
            "doc": "Excel from data\nreturn table as string XML for excel workbook"
        },
        "edsn": {
            "type": 100,
            "param": [ "symbols!tables" ],
            "doc": "Excel from tables\nreturn as a list of strings an XML document describing an Excel spreadshee"
        },
        "fram": {
            "type": 100,
            "param": [ "title_string", "list_of_string", "(left;right)" ],
            "doc": "frame\nreturns as a string an HTML page with two frames in a frameset wide enough to accomodate the lines of s"
        },
        "ha": {
            "type": 100,
            "param": [ "href_att_symbol", "link_text_string" ],
            "doc": "anchor\nreturns as a string an HTML a href element"
        },
        "hb": {
            "type": 100,
            "param": [ "href_att_symbol", "link_text_string" ],
            "doc": "anchor target\nreturns as a string an HTML a href element but also adds target=v to the tag"
        },
        "hc": {
            "type": 100,
            "param": ["string"],
            "doc": "escape lt\nreturns string with any \"<\" character escaped"
        },
        "he": {
            "type": 105,
            "param": ["string"],
            "doc": "HTTP 400\nreturns string with any \"<\" character escaped, adds a \"'\" at the front and returns a HTTP 400 error with that content"
        },
        "hn": {
            "type": 104,
            "param": [ "status_code_string", "content_type_symbol", "content_string" ],
            "doc": "HTTP response\nreturn as a string an HTTP error response"
        },
        "hp": {
            "type": 105,
            "param": ["strings"],
            "doc": "HTTP response pre\nreturns as a string a valid HTTP response displaying them as a pre element in an HTML document"
        },
        "hr": {
            "type": 100,
            "param": ["string"],
            "doc": "horizontal rule\nreturns a string of the same length filled with \"-\""
        },
        "ht": {
            "type": 100,
            "param": ["document_name_symbol"],
            "doc": "Marqdown to HTML\ngenerates htm file from symbol.txt"
        },
        "hta": {
            "type": 100,
            "param": [ "element_symbol", "attribute_val_dict"],
            "doc": "start tag\nreturn as a string an opening HTML tag for element_symbol"
        },
        "htac": {
            "type": 100,
            "param": [ "element_symbol", "attribute_val_dict", "content" ],
            "doc": "element\nreturn html element"
        },
        "htc": {
            "type": 100,
            "param": [ "HTML_doc_string" ],
            "doc": "document\nreturn HTML document with fixed style rules"
        },
        "http": {
            "type": 100,
            "param": [ "string" ],
            "doc": "hyperlinks\nreturns string with embedded URLs beginning in \"http://\" with href"
        },
        "hu": {
            "type": 105,
            "param": [ "string" ],
            "doc": "URI escape\nreturn strign with URI-unsafe characters replaced with safe equivalents"
        },
        "hug": {
            "type": 100,
            "param": [ "char_vector" ],
            "doc": "URI map"
        },
        "hy": {
            "type": 104,
            "param": [ "type_symbol", "string" ],
            "doc": "HTTP response content\nreturns as a string an HTTP response for string as content type symbol"
        },
        "HOME": {
            "type": 10,
            "doc": "webserver root\nlocation of the webserver root"
        },
        "iso8601": {
            "type": 100,
            "param": ["nanosec_int"],
            "doc": "ISO timestamp\nwhere input is the nanoseconds since 2000.01.01 as an int atom, return string as a timestamp in ISO-8601 format"
        },
        "jx": {
            "type": 100,
            "param": [ "start_row", "table_name_symbol" ],
            "doc": "table\nreturns a list of string representing table from start row"
        },
        "ka": {
            "type": 104,
            "param": [ "idle_timeout_int" ],
            "doc": "HTTP keepalive"
        },
        "logo": {
            "type": 10,
            "doc": "KX logo"
        },
        "nbr": {
            "type": 104,
            "param": ["string"],
            "doc": "no break\nreturn string as content of a nobr element"
        },
        "pre": {
            "type": 104,
            "param": ["string_list"],
            "doc": "pre\nreturn strings as content of a pre element with embedded new lines"
        },
        "sa": {
            "type": 10,
            "doc": "anchor style\nCSS style rules used in the web console for anchor elements"
        },
        "sb": {
            "type": 10,
            "doc": "body-style\nCSS style rules used in the web console for the HTML body"
        },
        "sc": {
            "type": 10,
            "doc": "URI-safe\ncharacters that do not need to be escaped in URIs"
        },
        "td": {
            "type": 100,
            "param": ["table"],
            "doc": "TSV from data\nreturn table as a list of tab-separated value strings"
        },
        "text": {
            "type": 100,
            "param": ["string_list"],
            "doc": "paragraphs\nreturn as a string with each item as a content of a p element"
        },
        "tx": {
            "type": 99,
            "doc": "filetypes\nDictionary of file types and corresponding conversion functions"
        },
        "ty": {
            "type": 99,
            "doc": "MIME types\nDictionary of content types and corresponding media types."
        },
        "uh": {
            "type": 100,
            "param": [ "string" ],
            "doc": "URI unescape\nreturns string with %xx hex sequences replaced with character equivalents."
        },
        "val": {
            "type": 101,
            "param": [ "request" ],
            "doc": "value\n.h.val is called by .z.ph to evaluate a request to the server."
        },
        "xd": {
            "type": 100,
            "param": ["table"],
            "doc": "XML\nreturn table as an XML table as a list of strings"
        },
        "xmp": {
            "type": 100,
            "param": ["string_list"],
            "doc": "XMP\nreturns as a string x as the newline-separated content of an HTML xmp element"
        },
        "xs": {
            "type": 104,
            "param": ["string"],
            "doc": "XML escape\nreturns string with characters XML-escaped when necessary"
        },
        "xt": {
            "type": 100,
            "param": [ "`json", "json_string_lists" ],
            "doc": "JSON\nreturns a dictionary for each json_string"
        }
    }
}
